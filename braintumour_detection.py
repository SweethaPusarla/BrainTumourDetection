# -*- coding: utf-8 -*-
"""BrainTumour Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GQSXdz9HWtU4kPZ8ar77W-MC2QGrlFTZ
"""



import opendatasets as od

download_url = 'https://www.kaggle.com/datasets/sartajbhuvaji/brain-tumor-classification-mri'

od.download(download_url)

import numpy as np
import pandas as pd
import cv2
import os
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

path = os.listdir('/content/brain-tumor-classification-mri/Training')
classes = {'no_tumor':0, 'pituitary_tumor':1}

import cv2
import os
X = []
Y = []

# Correct the 'classes' dictionary to match the actual folder names
classes = {'no_tumor':0, 'pituitary_tumor':1}

for cls in classes:
    pth = '/content/brain-tumor-classification-mri/Testing/' + cls
    for j in os.listdir(pth):
        img = cv2.imread(pth+'/'+j, 0)
        img = cv2.resize(img, (200,200))
        X.append(img)
        Y.append(classes[cls])

X = np.array(X)
Y = np.array(Y)

X_updated = X.reshape(len(X), -1)

np.unique(Y)

pd.Series(Y).value_counts()

X.shape, X_updated.shape

plt.imshow(X[0], cmap='gray')

X_updated = X.reshape(len(X), -1)
X_updated.shape

xtrain, xtest, ytrain, ytest = train_test_split(X_updated, Y, random_state=10,
                                               test_size=.20)

xtrain.shape, xtest.shape

print(xtrain.max(), xtrain.min())
print(xtest.max(), xtest.min())
xtrain = xtrain/255
xtest = xtest/255
print(xtrain.max(), xtrain.min())
print(xtest.max(), xtest.min())

from sklearn.decomposition import PCA

print(xtrain.shape, xtest.shape)

pca = PCA(.98)
# pca_train = pca.fit_transform(xtrain)
# pca_test = pca.transform(xtest)
pca_train = xtrain
pca_test = xtest

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC

import warnings
warnings.filterwarnings('ignore')

lg = LogisticRegression(C=0.1)
lg.fit(xtrain, ytrain)

sv = SVC()
sv.fit(xtrain, ytrain)

print("Training Score:", lg.score(xtrain, ytrain))
print("Testing Score:", lg.score(xtest, ytest))

print("Training Score:", sv.score(xtrain, ytrain))
print("Testing Score:", sv.score(xtest, ytest))

pred = sv.predict(xtest)

misclassified=np.where(ytest!=pred)
misclassified

dec = {0:'No Tumor', 1:'Positive Tumor'}

plt.figure(figsize=(12, 8))
c = 1
for i in os.listdir('/content/brain-tumor-classification-mri/Testing/no_tumor/')[:9]:
    plt.subplot(3, 3, c)

    img_path = '/content/brain-tumor-classification-mri/Testing/no_tumor/' + i
    img = cv2.imread(img_path, 0)

    if img is None:
        print(f"Error reading image {img_path}")
        continue

    img1 = cv2.resize(img, (200, 200))
    img1 = img1.reshape(1, -1) / 255
    p = sv.predict(img1)

    plt.title(dec[p[0]])
    plt.imshow(img, cmap='gray')
    plt.axis('off')
    c += 1

plt.figure(figsize=(12, 8))
c = 1
for i in os.listdir('/content/brain-tumor-classification-mri/Testing/pituitary_tumor')[:16]:
    plt.subplot(4, 4, c)

    img_path = '/content/brain-tumor-classification-mri/Testing/pituitary_tumor/' + i
    img = cv2.imread(img_path, 0)

    if img is None:
        print(f"Error reading image {img_path}")
        continue

    img1 = cv2.resize(img, (200, 200))
    img1 = img1.reshape(1, -1) / 255
    p = sv.predict(img1)

    plt.title(dec[p[0]])
    plt.imshow(img, cmap='gray')
    plt.axis('off')
    c += 1

plt.show()

from sklearn.ensemble import RandomForestClassifier  # Example model

# Example: Train a model (replace with your actual model training code)
model = RandomForestClassifier()
X_train = [[0, 0], [1, 1]]  # Example training data
y_train = [0, 1]  # Example labels
model.fit(X_train, y_train)

# Now save the model using pickle
import pickle
model_filename = 'brain_tumor_model.pkl'
with open(model_filename, 'wb') as file:
    pickle.dump(model, file)

